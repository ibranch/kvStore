#!/usr/bin/env python

import sys, socket, select, time, json, random, math
from math import ceil

ELECTION_TIMEOUT = float(random.randrange(150, 300)) / 1000 # Convert to ms
HEARTBEAT_TIMEOUT = .05
FOLLOWER_TIMEOUT = 1

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

currentTerm = 0
lastApplied = -1
commitIndex = -1
lastClock = time.time()
candidate = False
leader_id = None
votedFor = None # (term, id)
votesForMe = []
log = []
readyToSend = []
stateMachine = {}

nextIndex = {}
matchIndex = {}

def sendToAll(message):
    global replica_ids
    for server in replica_ids:
        message['dst'] = server
        sock.send(json.dumps(message))


def initialIndexes():
    global nextIndex, matchIndex
    for id in replica_ids:
        nextIndex[id] = len(log)
        matchIndex[id] = len(log) - 1


def lastLog():
    return len(log) - 1


def commit(data):
    stateMachine[data['key']] = data['value']
    sendMessageToClient(data, 'ok')


def followerCommit(leaderCommit):
    global commitIndex
    if commitIndex + 1 <= leaderCommit:
        data = log[commitIndex][1]
        stateMachine[data['key']] = data['value']
        commitIndex = min(leaderCommit, lastLog())


def sendAppendEntries(dst=None):
    global my_id,lastClock,lastApplied,nextIndex, matchIndex
    message = {
        'src': my_id,
        'leader': leader_id,
        'term': currentTerm,
        'type': 'append',
        'leaderCommit': commitIndex
    }
    if not dst:
        for followerId in replica_ids:
            message['dst'] = followerId
            message['entries'] = log[nextIndex[followerId]:]
            if len(message['entries']) > 3:
                message['entries'] = message['entries'][:3]
            message['prevLogIndex'] = matchIndex[followerId]
            message['prevLogTerm'] = log[matchIndex[followerId]][0]
            sock.send(json.dumps(message))
    else:
        message['dst'] = dst
        message['entries'] = log[nextIndex[dst]:]
        if len(message['entries']) > 3:
            message['entries'] = message['entries'][:3]
        message['prevLogIndex'] = matchIndex[dst]
        message['prevLogTerm'] = log[matchIndex[dst]][0]
        sock.send(json.dumps(message))
    lastClock = time.time()


def sendHeartbeat():
    global my_id, lastClock, lastApplied, nextIndex, matchIndex
    message = {
        'src': my_id,
        'leader': my_id,
        'term': currentTerm,
        'type': 'heartbeat',
        'leaderCommit': commitIndex
    }

    sendToAll(message)
    lastClock = time.time()


def sendMessageToClient(data, type):
    global my_id, leader_id
    message = {'src': my_id,
               'key' : data['key'],
               'dst': data['src'],
               'MID': data['MID'],
               'type': type,
               'leader': leader_id}
    sock.send(json.dumps(message))

def AppendEntries(term, leaderId, prevLogIndex, prevLogTerm, leaderCommit, entries):
    global lastClock, votesForMe, candidate, leader_id, currentTerm, log, commitIndex, votedFor, matchIndex, nextIndex, readyToSend
    msg = {'src': my_id, 'type': 'ack', 'dst': leaderId, 'leader': leader_id}
    msg['value'] = True
    if currentTerm <= term:
        currentTerm = term
        if candidate or my_id == leader_id:
            leader_id = leaderId
            votesForMe = []
            candidate = False
            votedFor = None
            matchIndex = {}
            nextIndex = {}
            readyToSend = []
        if leaderCommit == -1:
            log = log + entries
        # smaller log
        elif lastLog() < prevLogIndex:
            msg['value'] = False
        # same entry but different terms
        elif lastLog() == prevLogIndex and log[prevLogIndex][0] != prevLogTerm:

            msg['value'] = False
            # for item in log[prevLogIndex:]:
            #     print 'FAIL'
            #     sendMessageToClient(item[1], 'fail')
            log = log[:prevLogIndex]

            #log = log + entries
        # bigger log
        elif lastLog() > prevLogIndex:
            log = log[:prevLogIndex + 1]
            log = log + entries
            followerCommit(leaderCommit)
        else:
            log = log + entries
            followerCommit(leaderCommit)
    else:
        currentTerm = term
        msg['value'] = False
    msg['next_index'] = len(log)
    msg['term'] = currentTerm

    lastClock = time.time()
    sock.send(json.dumps(msg))

def recieveHeartbeat(term, leaderId, leaderCommit):
    global lastClock, votesForMe, candidate, leader_id, votedFor, currentTerm, my_id, matchIndex, nextIndex, readyToSend, commitIndex
    if currentTerm <= term:
        lastClock = time.time()
        if candidate or leader_id == my_id:
            leader_id = leaderId
            votesForMe = []
            candidate = False
            votedFor = None
            matchIndex = {}
            nextIndex = {}
            readyToSend = []
        if leaderCommit != -1 and commitIndex + 1 == leaderCommit:
            followerCommit(leaderCommit)
        currentTerm = max(currentTerm, term)



def GetAck(followerId, term, success, leaderId, nextFollowerIndex):
    global currentTerm, leader_id, nextIndex, matchIndex, log, commitIndex, lastApplied, readyToSend

    if term > currentTerm:
        currentTerm = term
        leader_id = leaderId
        return
    if success:
        nextIndex[followerId] = nextFollowerIndex
        matchIndex[followerId] = nextFollowerIndex - 1
        #
        # print 'commit Index: %s' % commitIndex
        # print 'match Index for  %s : %s' % (followerId, matchIndex[followerId])
        # print 'last Log : %s' % (lastLog())

        if matchIndex[followerId] >= commitIndex + 1 and lastLog() >= commitIndex + 1:
            readyToSend.append(followerId)
            if len(readyToSend) >= int(ceil(len(replica_ids) / 2)):

                readyToSend = []
                lastApplied += 1
                commitIndex += 1
                data = log[lastApplied][1]
                commit(data)

    else:
        nextIndex[followerId] = nextFollowerIndex
        matchIndex[followerId] = nextFollowerIndex - 1
        sendAppendEntries(dst=followerId)

def RequestVote():
    global lastClock, candidate, votedFor, votesForMe, leader_id, currentTerm
    candidate = True
    votedFor = my_id
    votesForMe = [my_id]
    currentTerm += 1
    message = {'src': my_id,
                          'leader': my_id,
                          'type': 'election',
                          'term': currentTerm,
                          'logLength': len(log),
               }

    sendToAll(message)


def validCandidate(term, logLength):

    if currentTerm > term or currentTerm == term and votedFor is not None:
        return False
    elif term > currentTerm and lastLog() <= logLength - 1:
        return True
    else:
        return lastLog() <= logLength - 1


def VoteRequested(term, candidateId, logLength):
    global votedFor, leader_id, currentTerm, lastClock, votesForMe, candidate
    message = {'src': my_id,
                          'dst': candidateId,
                          'type': 'vote'}
    if term < currentTerm:
        message['vote'] = False
    else:
        if validCandidate(term, logLength):
            message['vote'] = True
            leader_id = candidateId
            lastClock = time.time()
            votedFor = candidateId
            candidate = False
        else:
            message['vote'] = False

    if currentTerm < term:
        currentTerm = term

    if not message['vote'] and votedFor is None:
        votedFor = my_id

    message['leader'] = votedFor

    sock.send(json.dumps(message))


def get(msg):
    global my_id, leader_id, stateMachine
    src = msg['src']
    MID = msg['MID']
    key = msg['key']
    message = {'src': my_id,
                           'key': key,
                          'dst': src,
                          'leader': leader_id,
                          'MID': MID}

    if leader_id != my_id:
        message['type'] = 'redirect'
    else:
        # I am the leader!
        try:
            value = stateMachine[key]
            message['value'] = value
            message['type'] = 'ok'
        except KeyError:
            message['type'] = 'fail'

    sock.send(json.dumps(message))


def put(msg):
    global my_id, leader_id, log, readyToSend, candidate
    if leader_id != my_id:
        sendMessageToClient(msg, 'redirect')
    else:
        # I am the leader!
        log.append((currentTerm, msg))
        readyToSend.append(my_id)
        sendAppendEntries()


while True:

    # Leader
    if leader_id == my_id:
        # send heartbeat
        if time.time() - lastClock > HEARTBEAT_TIMEOUT:
            sendHeartbeat()

    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        # Candidate
        if candidate:
            if msg['type'] == 'vote' and msg['vote'] and msg['src'] not in votesForMe:
                #  Vote for Pedro!
                votesForMe.append(msg['src'])
            if len(votesForMe) >= (ceil(int(len(replica_ids) + 1 / 2))):
                leader_id = my_id
                # Look at me. I am the leader now.
                print '%s has won the election for term %s with votes from %s' % (my_id, currentTerm, votesForMe)
                initialIndexes()
                sendHeartbeat()
                candidate = False
                votesForMe = []
                continue

        # Follower
        if msg['type'] == 'get':
            get(msg)
        elif msg['type'] == 'put':
            put(msg)
        elif msg['type'] == 'election':
            VoteRequested(msg['term'], msg['src'], msg['logLength'])
        elif msg['type'] == 'append':
            AppendEntries(msg['term'], msg['src'], msg['prevLogIndex'], msg['prevLogTerm'], msg['leaderCommit'], msg['entries'])
        elif msg['type'] == 'heartbeat':
            recieveHeartbeat(msg['term'], msg['src'], msg['leaderCommit'])
        elif msg['type'] == 'ack':
            GetAck(msg['src'], msg['term'], msg['value'], msg['leader'], msg['next_index'])

    if time.time() - lastClock > ELECTION_TIMEOUT and my_id != leader_id:
        # Initiate an election
        lastClock = time.time()  # This is ONLY updated on vote requests and heartbeats
        RequestVote()
