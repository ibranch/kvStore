#!/usr/bin/env python

import sys, socket, select, time, json, random

ELECTION_TIMEOUT = float(random.randrange(150, 300)) / 1000 # Convert to ms

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

lastClock, currentTerm, commitIndex, lastApplied = 0
candidate = False
leader_id = my_id
votedFor = None
votesForMe = []
log = []
stateMachine = {}

def Heartbeat():
    # TODO this is just a wrapper for a call to AppendEntries with no new info
    pass

def AppendEntries(term, leaderId, prevLogIndex, prevLogTermEntries, leaderCommit):
    global lastClock, votesForMe, candidate, leader_id
    # Listen to your
    lastClock = time.time() # This is ONLY updated on vote requests and heartbeats
    leader_id = leaderId
    # When it's calling for yooooou
    if term >= currentTerm and candidate:
        # transition out of the candidate state, if we were in it
        votesForMe = []
        candidate = False


def RequestVote():
    global lastClock, candidate, votedFor, votesForMe, leader_id
    lastClock = time.time() # This is ONLY updated on vote requests and heartbeats
    candidate = True
    votedFor = my_id
    votesForMe = [my_id]
    message = json.dumps({'src': my_id,
                          'dest': 'FFFF',
                          'leader': leader_id,
                          'type': 'election',
                          'term': currentTerm,
                          'logLength': len(log),
                          'lastLogTerm': log[len(log) - 1][0]})
    sock.send(message)


def VoteRequested(term, candidateId, logLength, lastLogTerm):
    global votedFor, leader_id
    message = json.dumps({'src': my_id,
                          'dest': candidateId,
                          'leader': leader_id,
                          'type': 'vote'})
    # if we vote for the candidate:
    message['vote'] = True
    votedFor = candidateId

    # if we don't vote for the candidate:
    message['vote'] = False


def get(msg):
    global my_id, leader_id, stateMachine
    src = msg['src']
    MID = msg['MID']
    key = msg['key']
    message = json.dumps({'src': my_id,
                          'dst': src,
                          'leader': leader_id,
                          'MID': MID})

    if leader_id != my_id:
        message['type'] = 'redirect'
    else:
        # I am the leader!
        try:
            value = stateMachine[key]
            message['value'] = value
        except KeyError:
            message['value'] = ''

    sock.send(message)


def put(msg):
    global my_id, leader_id
    log.append((currentTerm, msg))
    src = msg['src']
    MID = msg['MID']
    key = msg['key']
    message = json.dumps({'src': my_id,
                          'dst': src,
                          'leader': leader_id,
                          'MID': MID})

    if leader_id != my_id:
        message['type'] = 'redirect'
    else:
        # I am the leader!
        pass #TODO figure out all the state machine vs log shit

    sock.send(message)


while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        # Leader
        if leader_id == my_id:
            # This is calls to append entries
            # TODO implement all that stuff
            message = json.dumps({'src': my_id,
                                  'dest': 'FFFF',
                                  'prevLogIndex': NotImplemented,
                                  'prevLogTermEntries': NotImplemented,
                                  'leaderCommit': NotImplemented})
            sock.send(message)

        # Candidate
        if candidate:
            if msg['type'] == 'vote' and msg['vote']:
                #  Vote for Pedro!
                votesForMe.append(msg['src'])
            if len(votesForMe) >= (len(replica_ids) / 2):
                # Look at me. I am the leader now.
                Heartbeat()
                candidate = False
                votesForMe = []
                leader_id = my_id

        # Follower
        if msg['type'] == 'get':
            get(msg)
        elif msg['type'] == 'put':
            put(msg)
        elif msg['type'] == 'election':
            VoteRequested(msg['term'], msg['src'], msg['logLength'], msg['lastLogTerm'])
        elif msg['type'] == 'append':
            AppendEntries(msg['term'], msg['src'], msg['prevLogIndex'], msg['prevLogTermEntries'], msg['leaderCommit'])

    clock = time.time()
    if clock - lastClock > ELECTION_TIMEOUT:
        # Initiate an election
        currentTerm += 1
        RequestVote()
